/*
Deployment script for MovieDb

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO

USE [master];

GO

IF (DB_ID(N'MovieDb') IS NOT NULL) 
BEGIN
    ALTER DATABASE [MovieDb]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [MovieDb];
END

GO
PRINT N'Creating MovieDb...'
GO
CREATE DATABASE [MovieDb]
    ON 
    PRIMARY(NAME = [MovieDb], FILENAME = N'C:\Program Files\Microsoft SQL Server\MSSQL14.SQLEXPRESS\MSSQL\DATA\MovieDb_Primary.mdf')
    LOG ON (NAME = [MovieDb_log], FILENAME = N'C:\Program Files\Microsoft SQL Server\MSSQL14.SQLEXPRESS\MSSQL\DATA\MovieDb_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
USE [MovieDb];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'MovieDb')
    BEGIN
        ALTER DATABASE [MovieDb]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [MovieDb]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'MovieDb')
    BEGIN
        ALTER DATABASE [MovieDb]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'MovieDb')
    BEGIN
        ALTER DATABASE [MovieDb]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'MovieDb')
    BEGIN
        ALTER DATABASE [MovieDb]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'MovieDb')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [MovieDb]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'MovieDb')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [MovieDb]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [MovieDb]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'MovieDb')
    BEGIN
        ALTER DATABASE [MovieDb]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'MovieDb')
    BEGIN
        ALTER DATABASE [MovieDb]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'MovieDb')
    BEGIN
        ALTER DATABASE [MovieDb]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'MovieDb')
    BEGIN
        ALTER DATABASE [MovieDb]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'MovieDb')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'MovieDb')
    BEGIN
        ALTER DATABASE [MovieDb]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[MovieTvp]...';


GO
CREATE TYPE [dbo].[MovieTvp] AS TABLE (
    [Title]    VARCHAR (50)  NOT NULL,
    [Genre]    VARCHAR (50)  NOT NULL,
    [Year]     INT           NOT NULL,
    [ImageUrl] VARCHAR (200) NOT NULL PRIMARY KEY CLUSTERED ([Title] ASC));


GO
PRINT N'Creating [dbo].[Assoc_MovieGenre]...';


GO
CREATE TABLE [dbo].[Assoc_MovieGenre] (
    [MovieId] INT NOT NULL,
    [GenreId] INT NOT NULL
);


GO
PRINT N'Creating [dbo].[Genre]...';


GO
CREATE TABLE [dbo].[Genre] (
    [Id]    INT          IDENTITY (1, 1) NOT NULL,
    [Title] VARCHAR (50) NOT NULL,
    CONSTRAINT [PK_Genre] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Genre].[IX_Genre]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_Genre]
    ON [dbo].[Genre]([Title] ASC);


GO
PRINT N'Creating [dbo].[Movie]...';


GO
CREATE TABLE [dbo].[Movie] (
    [Id]       INT           IDENTITY (1, 1) NOT NULL,
    [Title]    VARCHAR (50)  NOT NULL,
    [Year]     INT           NOT NULL,
    [ImageUrl] VARCHAR (200) NOT NULL,
    CONSTRAINT [PK_Movie] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Movie].[IX_Movie]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_Movie]
    ON [dbo].[Movie]([Title] ASC);


GO
PRINT N'Creating [dbo].[FK_Assoc_MovieGenre_Genre]...';


GO
ALTER TABLE [dbo].[Assoc_MovieGenre]
    ADD CONSTRAINT [FK_Assoc_MovieGenre_Genre] FOREIGN KEY ([GenreId]) REFERENCES [dbo].[Genre] ([Id]);


GO
PRINT N'Creating [dbo].[FK_Assoc_MovieGenre_Movie]...';


GO
ALTER TABLE [dbo].[Assoc_MovieGenre]
    ADD CONSTRAINT [FK_Assoc_MovieGenre_Movie] FOREIGN KEY ([MovieId]) REFERENCES [dbo].[Movie] ([Id]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[MovieVw]...';


GO
CREATE VIEW [dbo].[MovieVw]
AS
	SELECT
			dbo.Movie.Title,
			dbo.Genre.Title AS Genre,
			dbo.Movie.Year,
			dbo.Movie.ImageUrl
	FROM	dbo.Movie
	INNER JOIN dbo.Assoc_MovieGenre ON dbo.Movie.Id = dbo.Assoc_MovieGenre.MovieId
	INNER JOIN dbo.Genre ON dbo.Genre.Id = dbo.Assoc_MovieGenre.GenreId
GO
PRINT N'Creating [dbo].[CreateMovie]...';


GO
CREATE PROCEDURE [dbo].[CreateMovie]
	@Title varchar(50),
	@Genre varchar(50),
	@Year int,
	@ImageUrl varchar(200)
AS
	INSERT INTO dbo.Movie
	(Title, Year, ImageUrl)
	VALUES(@Title, @Year, @ImageUrl)
	
	DECLARE @MovieId int = SCOPE_IDENTITY()
	DECLARE @GenreId int;

	SELECT @GenreId = dbo.Genre.Id FROM dbo.Genre WHERE dbo.Genre.Title = @Genre

	IF (@GenreId IS NULL)
	BEGIN
		INSERT INTO dbo.Genre
		(Title)
		VALUES(@Genre)

		SET @GenreId = SCOPE_IDENTITY()
	END
	
	INSERT INTO dbo.Assoc_MovieGenre
	(MovieId, GenreId)
	VALUES(@MovieId, @GenreId)

RETURN @MovieId
GO
PRINT N'Creating [dbo].[CreateMovies]...';


GO
CREATE PROCEDURE [dbo].[CreateMovies]
	@MovieTvp MovieTvp READONLY
AS
	SET NOCOUNT ON
	SET IDENTITY_INSERT dbo.Movie ON

	-- Insert Distinct Genres into the Genre table
	INSERT
	INTO	dbo.Genre
	SELECT DISTINCT(Genre)
	FROM	@MovieTvp
	EXCEPT
	SELECT	dbo.Genre.Title
	FROM	dbo.Genre


	--SELECT	DISTINCT Genre
	--FROM	@MovieTvp

	-- Insert Movies into the Movie Table
	DECLARE	@MaxMovieId int = 0;
	SELECT	@MaxMovieId = ISNULL(MAX(Id), 0)
	FROM	dbo.Movie

	INSERT
	INTO	dbo.Movie (Id, Title, [Year], ImageUrl)
	SELECT	@MaxMovieId + ROW_Number() OVER (ORDER BY Title) Id, Title, [Year], ImageUrl
	FROM	@MovieTvp m
	
	-- Select the Movie.Id and the Genre.Id columns and insert into the Assoc_MovieGenre
	INSERT
	INTO	dbo.Assoc_MovieGenre
	SELECT	dbo.Movie.Id, dbo.Genre.Id
	FROM	@MovieTvp mtvp
	INNER
	JOIN	dbo.Genre
	ON		dbo.Genre.Title = mtvp.Genre
	INNER
	JOIN	dbo.Movie
	ON		dbo.Movie.Title = mtvp.Title

	SET IDENTITY_INSERT dbo.Movie OFF
	SET NOCOUNT OFF


RETURN 0
GO
PRINT N'Creating [dbo].[CreateMoviesUsingCursor]...';


GO
CREATE PROCEDURE [dbo].[CreateMoviesUsingCursor]
	@MovieTvp MovieTvp READONLY
AS

	SET NOCOUNT ON

	DECLARE @title varchar(50), @genre varchar(50), @year int, @imageurl varchar(200)

	DECLARE movie_cursor CURSOR FOR   
	SELECT Title, Genre, [Year], ImageUrl
	FROM @MovieTvp
  
	OPEN movie_cursor  

	FETCH NEXT FROM movie_cursor   
	INTO @title, @genre, @year, @imageUrl
  
	WHILE @@FETCH_STATUS = 0  
	BEGIN
		EXEC dbo.CreateMovie @title, @genre, @year, @imageUrl
		FETCH NEXT FROM movie_cursor
		INTO @title, @genre, @year, @imageUrl
	END
	CLOSE movie_cursor;  
	DEALLOCATE movie_cursor;  

	SET NOCOUNT OFF
RETURN 0
GO
PRINT N'Creating [dbo].[GetAllMovies]...';


GO
CREATE PROCEDURE [dbo].[GetAllMovies]
AS
	SET NOCOUNT ON;
	SELECT	Title, Genre, Year, ImageUrl FROM dbo.MovieVw

RETURN 0
GO
PRINT N'Creating [dbo].[GetMoviesByGenre]...';


GO
CREATE PROCEDURE [dbo].[GetMoviesByGenre]
	@Genre varchar(50)
AS
	SELECT	Title, Genre, Year, ImageUrl FROM dbo.MovieVw
	WHERE	Genre = @Genre

RETURN 0
GO
PRINT N'Creating [dbo].[GetMoviesByYear]...';


GO
CREATE PROCEDURE [dbo].[GetMoviesByYear]
	@Year int
AS
	SET NOCOUNT ON;
	
	SELECT	Title, Genre, Year, ImageUrl FROM dbo.MovieVw
	WHERE	Year = @Year

RETURN 0
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '53c69e5b-f6e9-4fad-9bf6-284e66c76bc2')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('53c69e5b-f6e9-4fad-9bf6-284e66c76bc2')

GO

GO
--SET IDENTITY_INSERT [dbo].[Genre] ON
--INSERT INTO	[dbo].[Genre]
--		([Id], [Title])
--VALUES	(1, N'Action'),
--		(2, N'Animation'),
--		(3, N'Drama'),
--		(4, N'Musical'),
--		(5, N'Sci-Fi'),
--		(6, N'Thriller')
--SET IDENTITY_INSERT [dbo].[Genre] OFF
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'MovieDb', 'ON';
    END


GO
PRINT N'Update complete.';


GO